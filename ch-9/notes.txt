Scaffold.of(context).openDrawer(); // note you can't use it in the same widget where you defined the Scaffold;

// to show snackbar popup
ScaffoldMessenger.of(context).hideCurrentSnackBar();
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(
                  content: const Text(
                    'Added item to cart!',
                  ),
                  duration: const Duration(seconds: 2),
                  action: SnackBarAction(
                    label: 'UNDO',
                    onPressed: () {
                      cart.removeSingleItem(product.id);
                      // ScaffoldMessenger.of(context).hideCurrentSnackBar();
                    },
                  ),
                ),
              );

// on Dismissible

      confirmDismiss: (direction) {
        return showDialog(
          context: context,
          builder: (ctx) => AlertDialog(
            title: Text('Are you sure?'),
            content: Text('Do you want to remove the item from the cart?'),
            actions: [
              TextButton(
                  onPressed: () {
                    Navigator.of(ctx).pop(false);
                  },
                  child: Text('No')),
              TextButton(
                  onPressed: () {
                    Navigator.of(ctx).pop(true);
                  },
                  child: Text('Yes')),
            ],
          ),
        );
        // return Future.value(true);
      },

backgroundImage: NetworkImage(imageUrl),

edit product screen: focus node
and don't forget to dispose them otherwise they will stick in the memory after the user navigate to another page

// loading spinner
CircularProgressIndicator

// fetch data
either in the init function this way:
    Future.delayed(Duration.zero).then((_) {
      Provider.of<Products>(context).fetchAndSetProducts();
    });
or inside didChangeDependencies